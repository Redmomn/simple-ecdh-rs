use criterion::{Criterion, criterion_group, criterion_main};
use num_bigint::{BigInt, Sign};
use once_cell::sync::Lazy;
use simple_ecdh::{Ecdh, EllipticCurve, EllipticPoint, KeyExchange};
use std::hint::black_box;

pub static PRIME256V1: Lazy<EllipticCurve> = Lazy::new(|| EllipticCurve {
    p: BigInt::from_bytes_le(
        Sign::Plus,
        &[
            0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF,
        ],
    ),
    a: BigInt::from_bytes_le(
        Sign::Plus,
        &[
            0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF,
        ],
    ),
    b: BigInt::from_bytes_le(
        Sign::Plus,
        &[
            0x4B, 0x60, 0xD2, 0x27, 0x3E, 0x3C, 0xCE, 0x3B, 0xF6, 0xB0, 0x53, 0xCC, 0xB0, 0x06,
            0x1D, 0x65, 0xBC, 0x86, 0x98, 0x76, 0x55, 0xBD, 0xEB, 0xB3, 0xE7, 0x93, 0x3A, 0xAA,
            0xD8, 0x35, 0xC6, 0x5A,
        ],
    ),
    g: EllipticPoint::new(
        BigInt::from_bytes_le(
            Sign::Plus,
            &[
                0x96, 0xC2, 0x98, 0xD8, 0x45, 0x39, 0xA1, 0xF4, 0xA0, 0x33, 0xEB, 0x2D, 0x81, 0x7D,
                0x03, 0x77, 0xF2, 0x40, 0xA4, 0x63, 0xE5, 0xE6, 0xBC, 0xF8, 0x47, 0x42, 0x2C, 0xE1,
                0xF2, 0xD1, 0x17, 0x6B,
            ],
        ),
        BigInt::from_bytes_le(
            Sign::Plus,
            &[
                0xF5, 0x51, 0xBF, 0x37, 0x68, 0x40, 0xB6, 0xCB, 0xCE, 0x5E, 0x31, 0x6B, 0x57, 0x33,
                0xCE, 0x2B, 0x16, 0x9E, 0x0F, 0x7C, 0x4A, 0xEB, 0xE7, 0x8E, 0x9B, 0x7F, 0x1A, 0xFE,
                0xE2, 0x42, 0xE3, 0x4F,
            ],
        ),
    ),

    n: BigInt::from_bytes_le(
        Sign::Plus,
        &[
            0x51, 0x25, 0x63, 0xFC, 0xC2, 0xCA, 0xB9, 0xF3, 0x84, 0x9E, 0x17, 0xA7, 0xAD, 0xFA,
            0xE6, 0xBC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00,
            0xFF, 0xFF, 0xFF, 0xFF,
        ],
    ),
    size: 32,
    pack_size: 16,
});

fn ecdh_keygen_benchmark(c: &mut Criterion) {
    let curve_p256 = &PRIME256V1.clone();
    c.bench_function("ECDH 密钥生成", |b| {
        b.iter(|| {
            // 使用 black_box 来防止编译器优化掉这个函数调用
            let _alice = black_box(Ecdh::new(curve_p256.clone())).unwrap();
        });
    });
}

fn ecdh_pack_public_benchmark(c: &mut Criterion) {
    let curve_p256 = &PRIME256V1.clone();
    let ecdh = Ecdh::new(curve_p256.clone()).unwrap();
    c.bench_function("ECDH 公钥打包", |b| {
        b.iter(|| {
            // black_box 确保输入参数不会被优化
            let _public_key = black_box(ecdh.pack_public(false)).unwrap();
        });
    });
}

fn ecdh_key_exchange_benchmark(c: &mut Criterion) {
    let curve_p256 = &PRIME256V1.clone();
    let alice = Ecdh::new(curve_p256.clone()).unwrap();
    let bob_public_key = Ecdh::new(curve_p256.clone())
        .unwrap()
        .pack_public(false)
        .unwrap();

    c.bench_function("ECDH 密钥交换", |b| {
        b.iter(|| {
            let _shared_key = black_box(alice.key_exchange(bob_public_key.clone(), false)).unwrap();
        });
    });
}

// 组合所有基准测试组
criterion_group!(
    benches,
    ecdh_keygen_benchmark,
    ecdh_pack_public_benchmark,
    ecdh_key_exchange_benchmark
);
criterion_main!(benches);
